
//  ------------------------------------------------------------------------------------------------
//! # Casting Library
//! 
//! Provides macros for casting values.
//! 
//! Bit sizes supported range from 8 to 256 inclusive and are multiples of 8.
//! 
//! Items prefixed with `UNSAFE_` will not revert on overflow.
//! 
//! Items prefixed with `MINI_` will consume more runtime gas to the benefit of a smaller runtime
//! size.
//! 
//! ## API
//! 
//! For a given type, `TYPENAME`:
//! 
//! - `TYPENAME_MASK` - Used to downcast a value to a smaller type.
//! - `TO_TYPENAME` - Downcasts a value to a smaller type.
//! - `UNSAFE_TO_TYPENAME` - Downcasts a value to a smaller type.
//! - `MINI_TYPENAME_MASK` - Used to downcast a value to a smaller type.
//! - `MINI_TO_TYPENAME` - Downcasts a value to a smaller type.
//! - `UNSAFE_MINI_TO_TYPENAME` - Downcasts a value to a smaller type.
//! 

/// ## Overflow Error
/// 
/// Thrown when a cast overflows.
#define error Overflow()

/// ## U8 Mask
/// 
/// Used to downcast a value to a smaller type.
/// 
/// ### Usage
/// 
/// ```huff
/// #define macro MAIN() = takes (0) returns (0) {
///     0x00 calldataload
///     U8_MASK() and
/// }
/// ```
#define macro U8_MASK() = takes (0) returns (1) { 0xff }

/// ## U8 Cast
/// 
/// Downcasts a value to a smaller type.
/// 
/// The `UNSAFE_TO_U8` macro will not revert on overflow.
#define macro TO_U8() = takes (1) returns (1) {
    // takes:               // [value]
    dup1                    // [value, value]
    U8_MASK()         // [mask, value, value]
    and                     // [masked_value, value]
    dup2                    // [value, masked_value, value]
    eq                      // [is_safe, value]
    is_safe                 // [is_safe_dest, is_safe, value]
    jumpi                   // [value]
        __ERROR(Overflow)   // [err]
        0x00                // [ptr, err]
        mstore              // []
        0x04                // [err_len]
        0x00                // [ptr, err_len]
        revert              // []
    is_safe:                // [value]
}

/// ## U16 Mask
/// 
/// Used to downcast a value to a smaller type.
/// 
/// ### Usage
/// 
/// ```huff
/// #define macro MAIN() = takes (0) returns (0) {
///     0x00 calldataload
///     U16_MASK() and
/// }
/// ```
#define macro U16_MASK() = takes (0) returns (1) { 0xffff }

/// ## U16 Cast
/// 
/// Downcasts a value to a smaller type.
/// 
/// The `UNSAFE_TO_U16` macro will not revert on overflow.
#define macro TO_U16() = takes (1) returns (1) {
    // takes:               // [value]
    dup1                    // [value, value]
    U16_MASK()         // [mask, value, value]
    and                     // [masked_value, value]
    dup2                    // [value, masked_value, value]
    eq                      // [is_safe, value]
    is_safe                 // [is_safe_dest, is_safe, value]
    jumpi                   // [value]
        __ERROR(Overflow)   // [err]
        0x00                // [ptr, err]
        mstore              // []
        0x04                // [err_len]
        0x00                // [ptr, err_len]
        revert              // []
    is_safe:                // [value]
}

/// ## U24 Mask
/// 
/// Used to downcast a value to a smaller type.
/// 
/// ### Usage
/// 
/// ```huff
/// #define macro MAIN() = takes (0) returns (0) {
///     0x00 calldataload
///     U24_MASK() and
/// }
/// ```
#define macro U24_MASK() = takes (0) returns (1) { 0xffffff }

/// ## U24 Cast
/// 
/// Downcasts a value to a smaller type.
/// 
/// The `UNSAFE_TO_U24` macro will not revert on overflow.
#define macro TO_U24() = takes (1) returns (1) {
    // takes:               // [value]
    dup1                    // [value, value]
    U24_MASK()         // [mask, value, value]
    and                     // [masked_value, value]
    dup2                    // [value, masked_value, value]
    eq                      // [is_safe, value]
    is_safe                 // [is_safe_dest, is_safe, value]
    jumpi                   // [value]
        __ERROR(Overflow)   // [err]
        0x00                // [ptr, err]
        mstore              // []
        0x04                // [err_len]
        0x00                // [ptr, err_len]
        revert              // []
    is_safe:                // [value]
}

/// ## U32 Mask
/// 
/// Used to downcast a value to a smaller type.
/// 
/// ### Usage
/// 
/// ```huff
/// #define macro MAIN() = takes (0) returns (0) {
///     0x00 calldataload
///     U32_MASK() and
/// }
/// ```
#define macro U32_MASK() = takes (0) returns (1) { 0xffffffff }

/// ## U32 Cast
/// 
/// Downcasts a value to a smaller type.
/// 
/// The `UNSAFE_TO_U32` macro will not revert on overflow.
#define macro TO_U32() = takes (1) returns (1) {
    // takes:               // [value]
    dup1                    // [value, value]
    U32_MASK()         // [mask, value, value]
    and                     // [masked_value, value]
    dup2                    // [value, masked_value, value]
    eq                      // [is_safe, value]
    is_safe                 // [is_safe_dest, is_safe, value]
    jumpi                   // [value]
        __ERROR(Overflow)   // [err]
        0x00                // [ptr, err]
        mstore              // []
        0x04                // [err_len]
        0x00                // [ptr, err_len]
        revert              // []
    is_safe:                // [value]
}

/// ## Mini U32 Mask
/// 
/// Used to downcast a value to a smaller type.
/// 
/// This consumes more runtime gas to the benefit of a smaller runtime size.
/// 
/// ### Usage
/// 
/// ```huff
/// #define macro MAIN() = takes (0) returns (0) {
///     0x00 calldataload
///     MINI_U32_MASK() and
/// }
/// ```
#define macro MINI_U32_MASK() = takes (0) returns (1) { __MINI_MASK(32) }

/// ## Mini U32 Cast
/// 
/// Downcasts a value to a smaller type.
/// 
/// This consumes more runtime gas to the benefit of a smaller runtime size.
/// 
/// The `UNSAFE_MINI_TO_U32` macro will not revert on overflow.
#define macro UNSAFE_MINI_TO_U32() = takes (0) returns (0) {
    // takes:               // [value]
    MINI_U32_MASK()         // [mask, value]
    and                     // [masked_value]
}

/// ## U40 Mask
/// 
/// Used to downcast a value to a smaller type.
/// 
/// ### Usage
/// 
/// ```huff
/// #define macro MAIN() = takes (0) returns (0) {
///     0x00 calldataload
///     U40_MASK() and
/// }
/// ```
#define macro U40_MASK() = takes (0) returns (1) { 0xffffffffff }

/// ## U40 Cast
/// 
/// Downcasts a value to a smaller type.
/// 
/// The `UNSAFE_TO_U40` macro will not revert on overflow.
#define macro TO_U40() = takes (1) returns (1) {
    // takes:               // [value]
    dup1                    // [value, value]
    U40_MASK()         // [mask, value, value]
    and                     // [masked_value, value]
    dup2                    // [value, masked_value, value]
    eq                      // [is_safe, value]
    is_safe                 // [is_safe_dest, is_safe, value]
    jumpi                   // [value]
        __ERROR(Overflow)   // [err]
        0x00                // [ptr, err]
        mstore              // []
        0x04                // [err_len]
        0x00                // [ptr, err_len]
        revert              // []
    is_safe:                // [value]
}

/// ## Mini U40 Mask
/// 
/// Used to downcast a value to a smaller type.
/// 
/// This consumes more runtime gas to the benefit of a smaller runtime size.
/// 
/// ### Usage
/// 
/// ```huff
/// #define macro MAIN() = takes (0) returns (0) {
///     0x00 calldataload
///     MINI_U40_MASK() and
/// }
/// ```
#define macro MINI_U40_MASK() = takes (0) returns (1) { __MINI_MASK(40) }

/// ## Mini U40 Cast
/// 
/// Downcasts a value to a smaller type.
/// 
/// This consumes more runtime gas to the benefit of a smaller runtime size.
/// 
/// The `UNSAFE_MINI_TO_U40` macro will not revert on overflow.
#define macro UNSAFE_MINI_TO_U40() = takes (0) returns (0) {
    // takes:               // [value]
    MINI_U40_MASK()         // [mask, value]
    and                     // [masked_value]
}

/// ## U48 Mask
/// 
/// Used to downcast a value to a smaller type.
/// 
/// ### Usage
/// 
/// ```huff
/// #define macro MAIN() = takes (0) returns (0) {
///     0x00 calldataload
///     U48_MASK() and
/// }
/// ```
#define macro U48_MASK() = takes (0) returns (1) { 0xffffffffffff }

/// ## U48 Cast
/// 
/// Downcasts a value to a smaller type.
/// 
/// The `UNSAFE_TO_U48` macro will not revert on overflow.
#define macro TO_U48() = takes (1) returns (1) {
    // takes:               // [value]
    dup1                    // [value, value]
    U48_MASK()         // [mask, value, value]
    and                     // [masked_value, value]
    dup2                    // [value, masked_value, value]
    eq                      // [is_safe, value]
    is_safe                 // [is_safe_dest, is_safe, value]
    jumpi                   // [value]
        __ERROR(Overflow)   // [err]
        0x00                // [ptr, err]
        mstore              // []
        0x04                // [err_len]
        0x00                // [ptr, err_len]
        revert              // []
    is_safe:                // [value]
}

/// ## Mini U48 Mask
/// 
/// Used to downcast a value to a smaller type.
/// 
/// This consumes more runtime gas to the benefit of a smaller runtime size.
/// 
/// ### Usage
/// 
/// ```huff
/// #define macro MAIN() = takes (0) returns (0) {
///     0x00 calldataload
///     MINI_U48_MASK() and
/// }
/// ```
#define macro MINI_U48_MASK() = takes (0) returns (1) { __MINI_MASK(48) }

/// ## Mini U48 Cast
/// 
/// Downcasts a value to a smaller type.
/// 
/// This consumes more runtime gas to the benefit of a smaller runtime size.
/// 
/// The `UNSAFE_MINI_TO_U48` macro will not revert on overflow.
#define macro UNSAFE_MINI_TO_U48() = takes (0) returns (0) {
    // takes:               // [value]
    MINI_U48_MASK()         // [mask, value]
    and                     // [masked_value]
}

/// ## U56 Mask
/// 
/// Used to downcast a value to a smaller type.
/// 
/// ### Usage
/// 
/// ```huff
/// #define macro MAIN() = takes (0) returns (0) {
///     0x00 calldataload
///     U56_MASK() and
/// }
/// ```
#define macro U56_MASK() = takes (0) returns (1) { 0xffffffffffffff }

/// ## U56 Cast
/// 
/// Downcasts a value to a smaller type.
/// 
/// The `UNSAFE_TO_U56` macro will not revert on overflow.
#define macro TO_U56() = takes (1) returns (1) {
    // takes:               // [value]
    dup1                    // [value, value]
    U56_MASK()         // [mask, value, value]
    and                     // [masked_value, value]
    dup2                    // [value, masked_value, value]
    eq                      // [is_safe, value]
    is_safe                 // [is_safe_dest, is_safe, value]
    jumpi                   // [value]
        __ERROR(Overflow)   // [err]
        0x00                // [ptr, err]
        mstore              // []
        0x04                // [err_len]
        0x00                // [ptr, err_len]
        revert              // []
    is_safe:                // [value]
}

/// ## Mini U56 Mask
/// 
/// Used to downcast a value to a smaller type.
/// 
/// This consumes more runtime gas to the benefit of a smaller runtime size.
/// 
/// ### Usage
/// 
/// ```huff
/// #define macro MAIN() = takes (0) returns (0) {
///     0x00 calldataload
///     MINI_U56_MASK() and
/// }
/// ```
#define macro MINI_U56_MASK() = takes (0) returns (1) { __MINI_MASK(56) }

/// ## Mini U56 Cast
/// 
/// Downcasts a value to a smaller type.
/// 
/// This consumes more runtime gas to the benefit of a smaller runtime size.
/// 
/// The `UNSAFE_MINI_TO_U56` macro will not revert on overflow.
#define macro UNSAFE_MINI_TO_U56() = takes (0) returns (0) {
    // takes:               // [value]
    MINI_U56_MASK()         // [mask, value]
    and                     // [masked_value]
}

/// ## U64 Mask
/// 
/// Used to downcast a value to a smaller type.
/// 
/// ### Usage
/// 
/// ```huff
/// #define macro MAIN() = takes (0) returns (0) {
///     0x00 calldataload
///     U64_MASK() and
/// }
/// ```
#define macro U64_MASK() = takes (0) returns (1) { 0xffffffffffffffff }

/// ## U64 Cast
/// 
/// Downcasts a value to a smaller type.
/// 
/// The `UNSAFE_TO_U64` macro will not revert on overflow.
#define macro TO_U64() = takes (1) returns (1) {
    // takes:               // [value]
    dup1                    // [value, value]
    U64_MASK()         // [mask, value, value]
    and                     // [masked_value, value]
    dup2                    // [value, masked_value, value]
    eq                      // [is_safe, value]
    is_safe                 // [is_safe_dest, is_safe, value]
    jumpi                   // [value]
        __ERROR(Overflow)   // [err]
        0x00                // [ptr, err]
        mstore              // []
        0x04                // [err_len]
        0x00                // [ptr, err_len]
        revert              // []
    is_safe:                // [value]
}

/// ## Mini U64 Mask
/// 
/// Used to downcast a value to a smaller type.
/// 
/// This consumes more runtime gas to the benefit of a smaller runtime size.
/// 
/// ### Usage
/// 
/// ```huff
/// #define macro MAIN() = takes (0) returns (0) {
///     0x00 calldataload
///     MINI_U64_MASK() and
/// }
/// ```
#define macro MINI_U64_MASK() = takes (0) returns (1) { __MINI_MASK(64) }

/// ## Mini U64 Cast
/// 
/// Downcasts a value to a smaller type.
/// 
/// This consumes more runtime gas to the benefit of a smaller runtime size.
/// 
/// The `UNSAFE_MINI_TO_U64` macro will not revert on overflow.
#define macro UNSAFE_MINI_TO_U64() = takes (0) returns (0) {
    // takes:               // [value]
    MINI_U64_MASK()         // [mask, value]
    and                     // [masked_value]
}

/// ## U72 Mask
/// 
/// Used to downcast a value to a smaller type.
/// 
/// ### Usage
/// 
/// ```huff
/// #define macro MAIN() = takes (0) returns (0) {
///     0x00 calldataload
///     U72_MASK() and
/// }
/// ```
#define macro U72_MASK() = takes (0) returns (1) { 0xffffffffffffffffff }

/// ## U72 Cast
/// 
/// Downcasts a value to a smaller type.
/// 
/// The `UNSAFE_TO_U72` macro will not revert on overflow.
#define macro TO_U72() = takes (1) returns (1) {
    // takes:               // [value]
    dup1                    // [value, value]
    U72_MASK()         // [mask, value, value]
    and                     // [masked_value, value]
    dup2                    // [value, masked_value, value]
    eq                      // [is_safe, value]
    is_safe                 // [is_safe_dest, is_safe, value]
    jumpi                   // [value]
        __ERROR(Overflow)   // [err]
        0x00                // [ptr, err]
        mstore              // []
        0x04                // [err_len]
        0x00                // [ptr, err_len]
        revert              // []
    is_safe:                // [value]
}

/// ## Mini U72 Mask
/// 
/// Used to downcast a value to a smaller type.
/// 
/// This consumes more runtime gas to the benefit of a smaller runtime size.
/// 
/// ### Usage
/// 
/// ```huff
/// #define macro MAIN() = takes (0) returns (0) {
///     0x00 calldataload
///     MINI_U72_MASK() and
/// }
/// ```
#define macro MINI_U72_MASK() = takes (0) returns (1) { __MINI_MASK(72) }

/// ## Mini U72 Cast
/// 
/// Downcasts a value to a smaller type.
/// 
/// This consumes more runtime gas to the benefit of a smaller runtime size.
/// 
/// The `UNSAFE_MINI_TO_U72` macro will not revert on overflow.
#define macro UNSAFE_MINI_TO_U72() = takes (0) returns (0) {
    // takes:               // [value]
    MINI_U72_MASK()         // [mask, value]
    and                     // [masked_value]
}

/// ## U80 Mask
/// 
/// Used to downcast a value to a smaller type.
/// 
/// ### Usage
/// 
/// ```huff
/// #define macro MAIN() = takes (0) returns (0) {
///     0x00 calldataload
///     U80_MASK() and
/// }
/// ```
#define macro U80_MASK() = takes (0) returns (1) { 0xffffffffffffffffffff }

/// ## U80 Cast
/// 
/// Downcasts a value to a smaller type.
/// 
/// The `UNSAFE_TO_U80` macro will not revert on overflow.
#define macro TO_U80() = takes (1) returns (1) {
    // takes:               // [value]
    dup1                    // [value, value]
    U80_MASK()         // [mask, value, value]
    and                     // [masked_value, value]
    dup2                    // [value, masked_value, value]
    eq                      // [is_safe, value]
    is_safe                 // [is_safe_dest, is_safe, value]
    jumpi                   // [value]
        __ERROR(Overflow)   // [err]
        0x00                // [ptr, err]
        mstore              // []
        0x04                // [err_len]
        0x00                // [ptr, err_len]
        revert              // []
    is_safe:                // [value]
}

/// ## Mini U80 Mask
/// 
/// Used to downcast a value to a smaller type.
/// 
/// This consumes more runtime gas to the benefit of a smaller runtime size.
/// 
/// ### Usage
/// 
/// ```huff
/// #define macro MAIN() = takes (0) returns (0) {
///     0x00 calldataload
///     MINI_U80_MASK() and
/// }
/// ```
#define macro MINI_U80_MASK() = takes (0) returns (1) { __MINI_MASK(80) }

/// ## Mini U80 Cast
/// 
/// Downcasts a value to a smaller type.
/// 
/// This consumes more runtime gas to the benefit of a smaller runtime size.
/// 
/// The `UNSAFE_MINI_TO_U80` macro will not revert on overflow.
#define macro UNSAFE_MINI_TO_U80() = takes (0) returns (0) {
    // takes:               // [value]
    MINI_U80_MASK()         // [mask, value]
    and                     // [masked_value]
}

/// ## U88 Mask
/// 
/// Used to downcast a value to a smaller type.
/// 
/// ### Usage
/// 
/// ```huff
/// #define macro MAIN() = takes (0) returns (0) {
///     0x00 calldataload
///     U88_MASK() and
/// }
/// ```
#define macro U88_MASK() = takes (0) returns (1) { 0xffffffffffffffffffffff }

/// ## U88 Cast
/// 
/// Downcasts a value to a smaller type.
/// 
/// The `UNSAFE_TO_U88` macro will not revert on overflow.
#define macro TO_U88() = takes (1) returns (1) {
    // takes:               // [value]
    dup1                    // [value, value]
    U88_MASK()         // [mask, value, value]
    and                     // [masked_value, value]
    dup2                    // [value, masked_value, value]
    eq                      // [is_safe, value]
    is_safe                 // [is_safe_dest, is_safe, value]
    jumpi                   // [value]
        __ERROR(Overflow)   // [err]
        0x00                // [ptr, err]
        mstore              // []
        0x04                // [err_len]
        0x00                // [ptr, err_len]
        revert              // []
    is_safe:                // [value]
}

/// ## Mini U88 Mask
/// 
/// Used to downcast a value to a smaller type.
/// 
/// This consumes more runtime gas to the benefit of a smaller runtime size.
/// 
/// ### Usage
/// 
/// ```huff
/// #define macro MAIN() = takes (0) returns (0) {
///     0x00 calldataload
///     MINI_U88_MASK() and
/// }
/// ```
#define macro MINI_U88_MASK() = takes (0) returns (1) { __MINI_MASK(88) }

/// ## Mini U88 Cast
/// 
/// Downcasts a value to a smaller type.
/// 
/// This consumes more runtime gas to the benefit of a smaller runtime size.
/// 
/// The `UNSAFE_MINI_TO_U88` macro will not revert on overflow.
#define macro UNSAFE_MINI_TO_U88() = takes (0) returns (0) {
    // takes:               // [value]
    MINI_U88_MASK()         // [mask, value]
    and                     // [masked_value]
}

/// ## U96 Mask
/// 
/// Used to downcast a value to a smaller type.
/// 
/// ### Usage
/// 
/// ```huff
/// #define macro MAIN() = takes (0) returns (0) {
///     0x00 calldataload
///     U96_MASK() and
/// }
/// ```
#define macro U96_MASK() = takes (0) returns (1) { 0xffffffffffffffffffffffff }

/// ## U96 Cast
/// 
/// Downcasts a value to a smaller type.
/// 
/// The `UNSAFE_TO_U96` macro will not revert on overflow.
#define macro TO_U96() = takes (1) returns (1) {
    // takes:               // [value]
    dup1                    // [value, value]
    U96_MASK()         // [mask, value, value]
    and                     // [masked_value, value]
    dup2                    // [value, masked_value, value]
    eq                      // [is_safe, value]
    is_safe                 // [is_safe_dest, is_safe, value]
    jumpi                   // [value]
        __ERROR(Overflow)   // [err]
        0x00                // [ptr, err]
        mstore              // []
        0x04                // [err_len]
        0x00                // [ptr, err_len]
        revert              // []
    is_safe:                // [value]
}

/// ## Mini U96 Mask
/// 
/// Used to downcast a value to a smaller type.
/// 
/// This consumes more runtime gas to the benefit of a smaller runtime size.
/// 
/// ### Usage
/// 
/// ```huff
/// #define macro MAIN() = takes (0) returns (0) {
///     0x00 calldataload
///     MINI_U96_MASK() and
/// }
/// ```
#define macro MINI_U96_MASK() = takes (0) returns (1) { __MINI_MASK(96) }

/// ## Mini U96 Cast
/// 
/// Downcasts a value to a smaller type.
/// 
/// This consumes more runtime gas to the benefit of a smaller runtime size.
/// 
/// The `UNSAFE_MINI_TO_U96` macro will not revert on overflow.
#define macro UNSAFE_MINI_TO_U96() = takes (0) returns (0) {
    // takes:               // [value]
    MINI_U96_MASK()         // [mask, value]
    and                     // [masked_value]
}

/// ## U104 Mask
/// 
/// Used to downcast a value to a smaller type.
/// 
/// ### Usage
/// 
/// ```huff
/// #define macro MAIN() = takes (0) returns (0) {
///     0x00 calldataload
///     U104_MASK() and
/// }
/// ```
#define macro U104_MASK() = takes (0) returns (1) { 0xffffffffffffffffffffffffff }

/// ## U104 Cast
/// 
/// Downcasts a value to a smaller type.
/// 
/// The `UNSAFE_TO_U104` macro will not revert on overflow.
#define macro TO_U104() = takes (1) returns (1) {
    // takes:               // [value]
    dup1                    // [value, value]
    U104_MASK()         // [mask, value, value]
    and                     // [masked_value, value]
    dup2                    // [value, masked_value, value]
    eq                      // [is_safe, value]
    is_safe                 // [is_safe_dest, is_safe, value]
    jumpi                   // [value]
        __ERROR(Overflow)   // [err]
        0x00                // [ptr, err]
        mstore              // []
        0x04                // [err_len]
        0x00                // [ptr, err_len]
        revert              // []
    is_safe:                // [value]
}

/// ## Mini U104 Mask
/// 
/// Used to downcast a value to a smaller type.
/// 
/// This consumes more runtime gas to the benefit of a smaller runtime size.
/// 
/// ### Usage
/// 
/// ```huff
/// #define macro MAIN() = takes (0) returns (0) {
///     0x00 calldataload
///     MINI_U104_MASK() and
/// }
/// ```
#define macro MINI_U104_MASK() = takes (0) returns (1) { __MINI_MASK(104) }

/// ## Mini U104 Cast
/// 
/// Downcasts a value to a smaller type.
/// 
/// This consumes more runtime gas to the benefit of a smaller runtime size.
/// 
/// The `UNSAFE_MINI_TO_U104` macro will not revert on overflow.
#define macro UNSAFE_MINI_TO_U104() = takes (0) returns (0) {
    // takes:               // [value]
    MINI_U104_MASK()         // [mask, value]
    and                     // [masked_value]
}

/// ## U112 Mask
/// 
/// Used to downcast a value to a smaller type.
/// 
/// ### Usage
/// 
/// ```huff
/// #define macro MAIN() = takes (0) returns (0) {
///     0x00 calldataload
///     U112_MASK() and
/// }
/// ```
#define macro U112_MASK() = takes (0) returns (1) { 0xffffffffffffffffffffffffffff }

/// ## U112 Cast
/// 
/// Downcasts a value to a smaller type.
/// 
/// The `UNSAFE_TO_U112` macro will not revert on overflow.
#define macro TO_U112() = takes (1) returns (1) {
    // takes:               // [value]
    dup1                    // [value, value]
    U112_MASK()         // [mask, value, value]
    and                     // [masked_value, value]
    dup2                    // [value, masked_value, value]
    eq                      // [is_safe, value]
    is_safe                 // [is_safe_dest, is_safe, value]
    jumpi                   // [value]
        __ERROR(Overflow)   // [err]
        0x00                // [ptr, err]
        mstore              // []
        0x04                // [err_len]
        0x00                // [ptr, err_len]
        revert              // []
    is_safe:                // [value]
}

/// ## Mini U112 Mask
/// 
/// Used to downcast a value to a smaller type.
/// 
/// This consumes more runtime gas to the benefit of a smaller runtime size.
/// 
/// ### Usage
/// 
/// ```huff
/// #define macro MAIN() = takes (0) returns (0) {
///     0x00 calldataload
///     MINI_U112_MASK() and
/// }
/// ```
#define macro MINI_U112_MASK() = takes (0) returns (1) { __MINI_MASK(112) }

/// ## Mini U112 Cast
/// 
/// Downcasts a value to a smaller type.
/// 
/// This consumes more runtime gas to the benefit of a smaller runtime size.
/// 
/// The `UNSAFE_MINI_TO_U112` macro will not revert on overflow.
#define macro UNSAFE_MINI_TO_U112() = takes (0) returns (0) {
    // takes:               // [value]
    MINI_U112_MASK()         // [mask, value]
    and                     // [masked_value]
}

/// ## U120 Mask
/// 
/// Used to downcast a value to a smaller type.
/// 
/// ### Usage
/// 
/// ```huff
/// #define macro MAIN() = takes (0) returns (0) {
///     0x00 calldataload
///     U120_MASK() and
/// }
/// ```
#define macro U120_MASK() = takes (0) returns (1) { 0xffffffffffffffffffffffffffffff }

/// ## U120 Cast
/// 
/// Downcasts a value to a smaller type.
/// 
/// The `UNSAFE_TO_U120` macro will not revert on overflow.
#define macro TO_U120() = takes (1) returns (1) {
    // takes:               // [value]
    dup1                    // [value, value]
    U120_MASK()         // [mask, value, value]
    and                     // [masked_value, value]
    dup2                    // [value, masked_value, value]
    eq                      // [is_safe, value]
    is_safe                 // [is_safe_dest, is_safe, value]
    jumpi                   // [value]
        __ERROR(Overflow)   // [err]
        0x00                // [ptr, err]
        mstore              // []
        0x04                // [err_len]
        0x00                // [ptr, err_len]
        revert              // []
    is_safe:                // [value]
}

/// ## Mini U120 Mask
/// 
/// Used to downcast a value to a smaller type.
/// 
/// This consumes more runtime gas to the benefit of a smaller runtime size.
/// 
/// ### Usage
/// 
/// ```huff
/// #define macro MAIN() = takes (0) returns (0) {
///     0x00 calldataload
///     MINI_U120_MASK() and
/// }
/// ```
#define macro MINI_U120_MASK() = takes (0) returns (1) { __MINI_MASK(120) }

/// ## Mini U120 Cast
/// 
/// Downcasts a value to a smaller type.
/// 
/// This consumes more runtime gas to the benefit of a smaller runtime size.
/// 
/// The `UNSAFE_MINI_TO_U120` macro will not revert on overflow.
#define macro UNSAFE_MINI_TO_U120() = takes (0) returns (0) {
    // takes:               // [value]
    MINI_U120_MASK()         // [mask, value]
    and                     // [masked_value]
}

/// ## U128 Mask
/// 
/// Used to downcast a value to a smaller type.
/// 
/// ### Usage
/// 
/// ```huff
/// #define macro MAIN() = takes (0) returns (0) {
///     0x00 calldataload
///     U128_MASK() and
/// }
/// ```
#define macro U128_MASK() = takes (0) returns (1) { 0xffffffffffffffffffffffffffffffff }

/// ## U128 Cast
/// 
/// Downcasts a value to a smaller type.
/// 
/// The `UNSAFE_TO_U128` macro will not revert on overflow.
#define macro TO_U128() = takes (1) returns (1) {
    // takes:               // [value]
    dup1                    // [value, value]
    U128_MASK()         // [mask, value, value]
    and                     // [masked_value, value]
    dup2                    // [value, masked_value, value]
    eq                      // [is_safe, value]
    is_safe                 // [is_safe_dest, is_safe, value]
    jumpi                   // [value]
        __ERROR(Overflow)   // [err]
        0x00                // [ptr, err]
        mstore              // []
        0x04                // [err_len]
        0x00                // [ptr, err_len]
        revert              // []
    is_safe:                // [value]
}

/// ## Mini U128 Mask
/// 
/// Used to downcast a value to a smaller type.
/// 
/// This consumes more runtime gas to the benefit of a smaller runtime size.
/// 
/// ### Usage
/// 
/// ```huff
/// #define macro MAIN() = takes (0) returns (0) {
///     0x00 calldataload
///     MINI_U128_MASK() and
/// }
/// ```
#define macro MINI_U128_MASK() = takes (0) returns (1) { __MINI_MASK(128) }

/// ## Mini U128 Cast
/// 
/// Downcasts a value to a smaller type.
/// 
/// This consumes more runtime gas to the benefit of a smaller runtime size.
/// 
/// The `UNSAFE_MINI_TO_U128` macro will not revert on overflow.
#define macro UNSAFE_MINI_TO_U128() = takes (0) returns (0) {
    // takes:               // [value]
    MINI_U128_MASK()         // [mask, value]
    and                     // [masked_value]
}

/// ## U136 Mask
/// 
/// Used to downcast a value to a smaller type.
/// 
/// ### Usage
/// 
/// ```huff
/// #define macro MAIN() = takes (0) returns (0) {
///     0x00 calldataload
///     U136_MASK() and
/// }
/// ```
#define macro U136_MASK() = takes (0) returns (1) { 0xffffffffffffffffffffffffffffffffff }

/// ## U136 Cast
/// 
/// Downcasts a value to a smaller type.
/// 
/// The `UNSAFE_TO_U136` macro will not revert on overflow.
#define macro TO_U136() = takes (1) returns (1) {
    // takes:               // [value]
    dup1                    // [value, value]
    U136_MASK()         // [mask, value, value]
    and                     // [masked_value, value]
    dup2                    // [value, masked_value, value]
    eq                      // [is_safe, value]
    is_safe                 // [is_safe_dest, is_safe, value]
    jumpi                   // [value]
        __ERROR(Overflow)   // [err]
        0x00                // [ptr, err]
        mstore              // []
        0x04                // [err_len]
        0x00                // [ptr, err_len]
        revert              // []
    is_safe:                // [value]
}

/// ## Mini U136 Mask
/// 
/// Used to downcast a value to a smaller type.
/// 
/// This consumes more runtime gas to the benefit of a smaller runtime size.
/// 
/// ### Usage
/// 
/// ```huff
/// #define macro MAIN() = takes (0) returns (0) {
///     0x00 calldataload
///     MINI_U136_MASK() and
/// }
/// ```
#define macro MINI_U136_MASK() = takes (0) returns (1) { __MINI_MASK(136) }

/// ## Mini U136 Cast
/// 
/// Downcasts a value to a smaller type.
/// 
/// This consumes more runtime gas to the benefit of a smaller runtime size.
/// 
/// The `UNSAFE_MINI_TO_U136` macro will not revert on overflow.
#define macro UNSAFE_MINI_TO_U136() = takes (0) returns (0) {
    // takes:               // [value]
    MINI_U136_MASK()         // [mask, value]
    and                     // [masked_value]
}

/// ## U144 Mask
/// 
/// Used to downcast a value to a smaller type.
/// 
/// ### Usage
/// 
/// ```huff
/// #define macro MAIN() = takes (0) returns (0) {
///     0x00 calldataload
///     U144_MASK() and
/// }
/// ```
#define macro U144_MASK() = takes (0) returns (1) { 0xffffffffffffffffffffffffffffffffffff }

/// ## U144 Cast
/// 
/// Downcasts a value to a smaller type.
/// 
/// The `UNSAFE_TO_U144` macro will not revert on overflow.
#define macro TO_U144() = takes (1) returns (1) {
    // takes:               // [value]
    dup1                    // [value, value]
    U144_MASK()         // [mask, value, value]
    and                     // [masked_value, value]
    dup2                    // [value, masked_value, value]
    eq                      // [is_safe, value]
    is_safe                 // [is_safe_dest, is_safe, value]
    jumpi                   // [value]
        __ERROR(Overflow)   // [err]
        0x00                // [ptr, err]
        mstore              // []
        0x04                // [err_len]
        0x00                // [ptr, err_len]
        revert              // []
    is_safe:                // [value]
}

/// ## Mini U144 Mask
/// 
/// Used to downcast a value to a smaller type.
/// 
/// This consumes more runtime gas to the benefit of a smaller runtime size.
/// 
/// ### Usage
/// 
/// ```huff
/// #define macro MAIN() = takes (0) returns (0) {
///     0x00 calldataload
///     MINI_U144_MASK() and
/// }
/// ```
#define macro MINI_U144_MASK() = takes (0) returns (1) { __MINI_MASK(144) }

/// ## Mini U144 Cast
/// 
/// Downcasts a value to a smaller type.
/// 
/// This consumes more runtime gas to the benefit of a smaller runtime size.
/// 
/// The `UNSAFE_MINI_TO_U144` macro will not revert on overflow.
#define macro UNSAFE_MINI_TO_U144() = takes (0) returns (0) {
    // takes:               // [value]
    MINI_U144_MASK()         // [mask, value]
    and                     // [masked_value]
}

/// ## U152 Mask
/// 
/// Used to downcast a value to a smaller type.
/// 
/// ### Usage
/// 
/// ```huff
/// #define macro MAIN() = takes (0) returns (0) {
///     0x00 calldataload
///     U152_MASK() and
/// }
/// ```
#define macro U152_MASK() = takes (0) returns (1) { 0xffffffffffffffffffffffffffffffffffffff }

/// ## U152 Cast
/// 
/// Downcasts a value to a smaller type.
/// 
/// The `UNSAFE_TO_U152` macro will not revert on overflow.
#define macro TO_U152() = takes (1) returns (1) {
    // takes:               // [value]
    dup1                    // [value, value]
    U152_MASK()         // [mask, value, value]
    and                     // [masked_value, value]
    dup2                    // [value, masked_value, value]
    eq                      // [is_safe, value]
    is_safe                 // [is_safe_dest, is_safe, value]
    jumpi                   // [value]
        __ERROR(Overflow)   // [err]
        0x00                // [ptr, err]
        mstore              // []
        0x04                // [err_len]
        0x00                // [ptr, err_len]
        revert              // []
    is_safe:                // [value]
}

/// ## Mini U152 Mask
/// 
/// Used to downcast a value to a smaller type.
/// 
/// This consumes more runtime gas to the benefit of a smaller runtime size.
/// 
/// ### Usage
/// 
/// ```huff
/// #define macro MAIN() = takes (0) returns (0) {
///     0x00 calldataload
///     MINI_U152_MASK() and
/// }
/// ```
#define macro MINI_U152_MASK() = takes (0) returns (1) { __MINI_MASK(152) }

/// ## Mini U152 Cast
/// 
/// Downcasts a value to a smaller type.
/// 
/// This consumes more runtime gas to the benefit of a smaller runtime size.
/// 
/// The `UNSAFE_MINI_TO_U152` macro will not revert on overflow.
#define macro UNSAFE_MINI_TO_U152() = takes (0) returns (0) {
    // takes:               // [value]
    MINI_U152_MASK()         // [mask, value]
    and                     // [masked_value]
}

/// ## U160 Mask
/// 
/// Used to downcast a value to a smaller type.
/// 
/// ### Usage
/// 
/// ```huff
/// #define macro MAIN() = takes (0) returns (0) {
///     0x00 calldataload
///     U160_MASK() and
/// }
/// ```
#define macro U160_MASK() = takes (0) returns (1) { 0xffffffffffffffffffffffffffffffffffffffff }

/// ## U160 Cast
/// 
/// Downcasts a value to a smaller type.
/// 
/// The `UNSAFE_TO_U160` macro will not revert on overflow.
#define macro TO_U160() = takes (1) returns (1) {
    // takes:               // [value]
    dup1                    // [value, value]
    U160_MASK()         // [mask, value, value]
    and                     // [masked_value, value]
    dup2                    // [value, masked_value, value]
    eq                      // [is_safe, value]
    is_safe                 // [is_safe_dest, is_safe, value]
    jumpi                   // [value]
        __ERROR(Overflow)   // [err]
        0x00                // [ptr, err]
        mstore              // []
        0x04                // [err_len]
        0x00                // [ptr, err_len]
        revert              // []
    is_safe:                // [value]
}

/// ## Mini U160 Mask
/// 
/// Used to downcast a value to a smaller type.
/// 
/// This consumes more runtime gas to the benefit of a smaller runtime size.
/// 
/// ### Usage
/// 
/// ```huff
/// #define macro MAIN() = takes (0) returns (0) {
///     0x00 calldataload
///     MINI_U160_MASK() and
/// }
/// ```
#define macro MINI_U160_MASK() = takes (0) returns (1) { __MINI_MASK(160) }

/// ## Mini U160 Cast
/// 
/// Downcasts a value to a smaller type.
/// 
/// This consumes more runtime gas to the benefit of a smaller runtime size.
/// 
/// The `UNSAFE_MINI_TO_U160` macro will not revert on overflow.
#define macro UNSAFE_MINI_TO_U160() = takes (0) returns (0) {
    // takes:               // [value]
    MINI_U160_MASK()         // [mask, value]
    and                     // [masked_value]
}

/// ## U168 Mask
/// 
/// Used to downcast a value to a smaller type.
/// 
/// ### Usage
/// 
/// ```huff
/// #define macro MAIN() = takes (0) returns (0) {
///     0x00 calldataload
///     U168_MASK() and
/// }
/// ```
#define macro U168_MASK() = takes (0) returns (1) { 0xffffffffffffffffffffffffffffffffffffffffff }

/// ## U168 Cast
/// 
/// Downcasts a value to a smaller type.
/// 
/// The `UNSAFE_TO_U168` macro will not revert on overflow.
#define macro TO_U168() = takes (1) returns (1) {
    // takes:               // [value]
    dup1                    // [value, value]
    U168_MASK()         // [mask, value, value]
    and                     // [masked_value, value]
    dup2                    // [value, masked_value, value]
    eq                      // [is_safe, value]
    is_safe                 // [is_safe_dest, is_safe, value]
    jumpi                   // [value]
        __ERROR(Overflow)   // [err]
        0x00                // [ptr, err]
        mstore              // []
        0x04                // [err_len]
        0x00                // [ptr, err_len]
        revert              // []
    is_safe:                // [value]
}

/// ## Mini U168 Mask
/// 
/// Used to downcast a value to a smaller type.
/// 
/// This consumes more runtime gas to the benefit of a smaller runtime size.
/// 
/// ### Usage
/// 
/// ```huff
/// #define macro MAIN() = takes (0) returns (0) {
///     0x00 calldataload
///     MINI_U168_MASK() and
/// }
/// ```
#define macro MINI_U168_MASK() = takes (0) returns (1) { __MINI_MASK(168) }

/// ## Mini U168 Cast
/// 
/// Downcasts a value to a smaller type.
/// 
/// This consumes more runtime gas to the benefit of a smaller runtime size.
/// 
/// The `UNSAFE_MINI_TO_U168` macro will not revert on overflow.
#define macro UNSAFE_MINI_TO_U168() = takes (0) returns (0) {
    // takes:               // [value]
    MINI_U168_MASK()         // [mask, value]
    and                     // [masked_value]
}

/// ## U176 Mask
/// 
/// Used to downcast a value to a smaller type.
/// 
/// ### Usage
/// 
/// ```huff
/// #define macro MAIN() = takes (0) returns (0) {
///     0x00 calldataload
///     U176_MASK() and
/// }
/// ```
#define macro U176_MASK() = takes (0) returns (1) { 0xffffffffffffffffffffffffffffffffffffffffffff }

/// ## U176 Cast
/// 
/// Downcasts a value to a smaller type.
/// 
/// The `UNSAFE_TO_U176` macro will not revert on overflow.
#define macro TO_U176() = takes (1) returns (1) {
    // takes:               // [value]
    dup1                    // [value, value]
    U176_MASK()         // [mask, value, value]
    and                     // [masked_value, value]
    dup2                    // [value, masked_value, value]
    eq                      // [is_safe, value]
    is_safe                 // [is_safe_dest, is_safe, value]
    jumpi                   // [value]
        __ERROR(Overflow)   // [err]
        0x00                // [ptr, err]
        mstore              // []
        0x04                // [err_len]
        0x00                // [ptr, err_len]
        revert              // []
    is_safe:                // [value]
}

/// ## Mini U176 Mask
/// 
/// Used to downcast a value to a smaller type.
/// 
/// This consumes more runtime gas to the benefit of a smaller runtime size.
/// 
/// ### Usage
/// 
/// ```huff
/// #define macro MAIN() = takes (0) returns (0) {
///     0x00 calldataload
///     MINI_U176_MASK() and
/// }
/// ```
#define macro MINI_U176_MASK() = takes (0) returns (1) { __MINI_MASK(176) }

/// ## Mini U176 Cast
/// 
/// Downcasts a value to a smaller type.
/// 
/// This consumes more runtime gas to the benefit of a smaller runtime size.
/// 
/// The `UNSAFE_MINI_TO_U176` macro will not revert on overflow.
#define macro UNSAFE_MINI_TO_U176() = takes (0) returns (0) {
    // takes:               // [value]
    MINI_U176_MASK()         // [mask, value]
    and                     // [masked_value]
}

/// ## U184 Mask
/// 
/// Used to downcast a value to a smaller type.
/// 
/// ### Usage
/// 
/// ```huff
/// #define macro MAIN() = takes (0) returns (0) {
///     0x00 calldataload
///     U184_MASK() and
/// }
/// ```
#define macro U184_MASK() = takes (0) returns (1) { 0xffffffffffffffffffffffffffffffffffffffffffffff }

/// ## U184 Cast
/// 
/// Downcasts a value to a smaller type.
/// 
/// The `UNSAFE_TO_U184` macro will not revert on overflow.
#define macro TO_U184() = takes (1) returns (1) {
    // takes:               // [value]
    dup1                    // [value, value]
    U184_MASK()         // [mask, value, value]
    and                     // [masked_value, value]
    dup2                    // [value, masked_value, value]
    eq                      // [is_safe, value]
    is_safe                 // [is_safe_dest, is_safe, value]
    jumpi                   // [value]
        __ERROR(Overflow)   // [err]
        0x00                // [ptr, err]
        mstore              // []
        0x04                // [err_len]
        0x00                // [ptr, err_len]
        revert              // []
    is_safe:                // [value]
}

/// ## Mini U184 Mask
/// 
/// Used to downcast a value to a smaller type.
/// 
/// This consumes more runtime gas to the benefit of a smaller runtime size.
/// 
/// ### Usage
/// 
/// ```huff
/// #define macro MAIN() = takes (0) returns (0) {
///     0x00 calldataload
///     MINI_U184_MASK() and
/// }
/// ```
#define macro MINI_U184_MASK() = takes (0) returns (1) { __MINI_MASK(184) }

/// ## Mini U184 Cast
/// 
/// Downcasts a value to a smaller type.
/// 
/// This consumes more runtime gas to the benefit of a smaller runtime size.
/// 
/// The `UNSAFE_MINI_TO_U184` macro will not revert on overflow.
#define macro UNSAFE_MINI_TO_U184() = takes (0) returns (0) {
    // takes:               // [value]
    MINI_U184_MASK()         // [mask, value]
    and                     // [masked_value]
}

/// ## U192 Mask
/// 
/// Used to downcast a value to a smaller type.
/// 
/// ### Usage
/// 
/// ```huff
/// #define macro MAIN() = takes (0) returns (0) {
///     0x00 calldataload
///     U192_MASK() and
/// }
/// ```
#define macro U192_MASK() = takes (0) returns (1) { 0xffffffffffffffffffffffffffffffffffffffffffffffff }

/// ## U192 Cast
/// 
/// Downcasts a value to a smaller type.
/// 
/// The `UNSAFE_TO_U192` macro will not revert on overflow.
#define macro TO_U192() = takes (1) returns (1) {
    // takes:               // [value]
    dup1                    // [value, value]
    U192_MASK()         // [mask, value, value]
    and                     // [masked_value, value]
    dup2                    // [value, masked_value, value]
    eq                      // [is_safe, value]
    is_safe                 // [is_safe_dest, is_safe, value]
    jumpi                   // [value]
        __ERROR(Overflow)   // [err]
        0x00                // [ptr, err]
        mstore              // []
        0x04                // [err_len]
        0x00                // [ptr, err_len]
        revert              // []
    is_safe:                // [value]
}

/// ## Mini U192 Mask
/// 
/// Used to downcast a value to a smaller type.
/// 
/// This consumes more runtime gas to the benefit of a smaller runtime size.
/// 
/// ### Usage
/// 
/// ```huff
/// #define macro MAIN() = takes (0) returns (0) {
///     0x00 calldataload
///     MINI_U192_MASK() and
/// }
/// ```
#define macro MINI_U192_MASK() = takes (0) returns (1) { __MINI_MASK(192) }

/// ## Mini U192 Cast
/// 
/// Downcasts a value to a smaller type.
/// 
/// This consumes more runtime gas to the benefit of a smaller runtime size.
/// 
/// The `UNSAFE_MINI_TO_U192` macro will not revert on overflow.
#define macro UNSAFE_MINI_TO_U192() = takes (0) returns (0) {
    // takes:               // [value]
    MINI_U192_MASK()         // [mask, value]
    and                     // [masked_value]
}

/// ## U200 Mask
/// 
/// Used to downcast a value to a smaller type.
/// 
/// ### Usage
/// 
/// ```huff
/// #define macro MAIN() = takes (0) returns (0) {
///     0x00 calldataload
///     U200_MASK() and
/// }
/// ```
#define macro U200_MASK() = takes (0) returns (1) { 0xffffffffffffffffffffffffffffffffffffffffffffffffff }

/// ## U200 Cast
/// 
/// Downcasts a value to a smaller type.
/// 
/// The `UNSAFE_TO_U200` macro will not revert on overflow.
#define macro TO_U200() = takes (1) returns (1) {
    // takes:               // [value]
    dup1                    // [value, value]
    U200_MASK()         // [mask, value, value]
    and                     // [masked_value, value]
    dup2                    // [value, masked_value, value]
    eq                      // [is_safe, value]
    is_safe                 // [is_safe_dest, is_safe, value]
    jumpi                   // [value]
        __ERROR(Overflow)   // [err]
        0x00                // [ptr, err]
        mstore              // []
        0x04                // [err_len]
        0x00                // [ptr, err_len]
        revert              // []
    is_safe:                // [value]
}

/// ## Mini U200 Mask
/// 
/// Used to downcast a value to a smaller type.
/// 
/// This consumes more runtime gas to the benefit of a smaller runtime size.
/// 
/// ### Usage
/// 
/// ```huff
/// #define macro MAIN() = takes (0) returns (0) {
///     0x00 calldataload
///     MINI_U200_MASK() and
/// }
/// ```
#define macro MINI_U200_MASK() = takes (0) returns (1) { __MINI_MASK(200) }

/// ## Mini U200 Cast
/// 
/// Downcasts a value to a smaller type.
/// 
/// This consumes more runtime gas to the benefit of a smaller runtime size.
/// 
/// The `UNSAFE_MINI_TO_U200` macro will not revert on overflow.
#define macro UNSAFE_MINI_TO_U200() = takes (0) returns (0) {
    // takes:               // [value]
    MINI_U200_MASK()         // [mask, value]
    and                     // [masked_value]
}

/// ## U208 Mask
/// 
/// Used to downcast a value to a smaller type.
/// 
/// ### Usage
/// 
/// ```huff
/// #define macro MAIN() = takes (0) returns (0) {
///     0x00 calldataload
///     U208_MASK() and
/// }
/// ```
#define macro U208_MASK() = takes (0) returns (1) { 0xffffffffffffffffffffffffffffffffffffffffffffffffffff }

/// ## U208 Cast
/// 
/// Downcasts a value to a smaller type.
/// 
/// The `UNSAFE_TO_U208` macro will not revert on overflow.
#define macro TO_U208() = takes (1) returns (1) {
    // takes:               // [value]
    dup1                    // [value, value]
    U208_MASK()         // [mask, value, value]
    and                     // [masked_value, value]
    dup2                    // [value, masked_value, value]
    eq                      // [is_safe, value]
    is_safe                 // [is_safe_dest, is_safe, value]
    jumpi                   // [value]
        __ERROR(Overflow)   // [err]
        0x00                // [ptr, err]
        mstore              // []
        0x04                // [err_len]
        0x00                // [ptr, err_len]
        revert              // []
    is_safe:                // [value]
}

/// ## Mini U208 Mask
/// 
/// Used to downcast a value to a smaller type.
/// 
/// This consumes more runtime gas to the benefit of a smaller runtime size.
/// 
/// ### Usage
/// 
/// ```huff
/// #define macro MAIN() = takes (0) returns (0) {
///     0x00 calldataload
///     MINI_U208_MASK() and
/// }
/// ```
#define macro MINI_U208_MASK() = takes (0) returns (1) { __MINI_MASK(208) }

/// ## Mini U208 Cast
/// 
/// Downcasts a value to a smaller type.
/// 
/// This consumes more runtime gas to the benefit of a smaller runtime size.
/// 
/// The `UNSAFE_MINI_TO_U208` macro will not revert on overflow.
#define macro UNSAFE_MINI_TO_U208() = takes (0) returns (0) {
    // takes:               // [value]
    MINI_U208_MASK()         // [mask, value]
    and                     // [masked_value]
}

/// ## U216 Mask
/// 
/// Used to downcast a value to a smaller type.
/// 
/// ### Usage
/// 
/// ```huff
/// #define macro MAIN() = takes (0) returns (0) {
///     0x00 calldataload
///     U216_MASK() and
/// }
/// ```
#define macro U216_MASK() = takes (0) returns (1) { 0xffffffffffffffffffffffffffffffffffffffffffffffffffffff }

/// ## U216 Cast
/// 
/// Downcasts a value to a smaller type.
/// 
/// The `UNSAFE_TO_U216` macro will not revert on overflow.
#define macro TO_U216() = takes (1) returns (1) {
    // takes:               // [value]
    dup1                    // [value, value]
    U216_MASK()         // [mask, value, value]
    and                     // [masked_value, value]
    dup2                    // [value, masked_value, value]
    eq                      // [is_safe, value]
    is_safe                 // [is_safe_dest, is_safe, value]
    jumpi                   // [value]
        __ERROR(Overflow)   // [err]
        0x00                // [ptr, err]
        mstore              // []
        0x04                // [err_len]
        0x00                // [ptr, err_len]
        revert              // []
    is_safe:                // [value]
}

/// ## Mini U216 Mask
/// 
/// Used to downcast a value to a smaller type.
/// 
/// This consumes more runtime gas to the benefit of a smaller runtime size.
/// 
/// ### Usage
/// 
/// ```huff
/// #define macro MAIN() = takes (0) returns (0) {
///     0x00 calldataload
///     MINI_U216_MASK() and
/// }
/// ```
#define macro MINI_U216_MASK() = takes (0) returns (1) { __MINI_MASK(216) }

/// ## Mini U216 Cast
/// 
/// Downcasts a value to a smaller type.
/// 
/// This consumes more runtime gas to the benefit of a smaller runtime size.
/// 
/// The `UNSAFE_MINI_TO_U216` macro will not revert on overflow.
#define macro UNSAFE_MINI_TO_U216() = takes (0) returns (0) {
    // takes:               // [value]
    MINI_U216_MASK()         // [mask, value]
    and                     // [masked_value]
}

/// ## U224 Mask
/// 
/// Used to downcast a value to a smaller type.
/// 
/// ### Usage
/// 
/// ```huff
/// #define macro MAIN() = takes (0) returns (0) {
///     0x00 calldataload
///     U224_MASK() and
/// }
/// ```
#define macro U224_MASK() = takes (0) returns (1) { 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff }

/// ## U224 Cast
/// 
/// Downcasts a value to a smaller type.
/// 
/// The `UNSAFE_TO_U224` macro will not revert on overflow.
#define macro TO_U224() = takes (1) returns (1) {
    // takes:               // [value]
    dup1                    // [value, value]
    U224_MASK()         // [mask, value, value]
    and                     // [masked_value, value]
    dup2                    // [value, masked_value, value]
    eq                      // [is_safe, value]
    is_safe                 // [is_safe_dest, is_safe, value]
    jumpi                   // [value]
        __ERROR(Overflow)   // [err]
        0x00                // [ptr, err]
        mstore              // []
        0x04                // [err_len]
        0x00                // [ptr, err_len]
        revert              // []
    is_safe:                // [value]
}

/// ## Mini U224 Mask
/// 
/// Used to downcast a value to a smaller type.
/// 
/// This consumes more runtime gas to the benefit of a smaller runtime size.
/// 
/// ### Usage
/// 
/// ```huff
/// #define macro MAIN() = takes (0) returns (0) {
///     0x00 calldataload
///     MINI_U224_MASK() and
/// }
/// ```
#define macro MINI_U224_MASK() = takes (0) returns (1) { __MINI_MASK(224) }

/// ## Mini U224 Cast
/// 
/// Downcasts a value to a smaller type.
/// 
/// This consumes more runtime gas to the benefit of a smaller runtime size.
/// 
/// The `UNSAFE_MINI_TO_U224` macro will not revert on overflow.
#define macro UNSAFE_MINI_TO_U224() = takes (0) returns (0) {
    // takes:               // [value]
    MINI_U224_MASK()         // [mask, value]
    and                     // [masked_value]
}

/// ## U232 Mask
/// 
/// Used to downcast a value to a smaller type.
/// 
/// ### Usage
/// 
/// ```huff
/// #define macro MAIN() = takes (0) returns (0) {
///     0x00 calldataload
///     U232_MASK() and
/// }
/// ```
#define macro U232_MASK() = takes (0) returns (1) { 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffff }

/// ## U232 Cast
/// 
/// Downcasts a value to a smaller type.
/// 
/// The `UNSAFE_TO_U232` macro will not revert on overflow.
#define macro TO_U232() = takes (1) returns (1) {
    // takes:               // [value]
    dup1                    // [value, value]
    U232_MASK()         // [mask, value, value]
    and                     // [masked_value, value]
    dup2                    // [value, masked_value, value]
    eq                      // [is_safe, value]
    is_safe                 // [is_safe_dest, is_safe, value]
    jumpi                   // [value]
        __ERROR(Overflow)   // [err]
        0x00                // [ptr, err]
        mstore              // []
        0x04                // [err_len]
        0x00                // [ptr, err_len]
        revert              // []
    is_safe:                // [value]
}

/// ## Mini U232 Mask
/// 
/// Used to downcast a value to a smaller type.
/// 
/// This consumes more runtime gas to the benefit of a smaller runtime size.
/// 
/// ### Usage
/// 
/// ```huff
/// #define macro MAIN() = takes (0) returns (0) {
///     0x00 calldataload
///     MINI_U232_MASK() and
/// }
/// ```
#define macro MINI_U232_MASK() = takes (0) returns (1) { __MINI_MASK(232) }

/// ## Mini U232 Cast
/// 
/// Downcasts a value to a smaller type.
/// 
/// This consumes more runtime gas to the benefit of a smaller runtime size.
/// 
/// The `UNSAFE_MINI_TO_U232` macro will not revert on overflow.
#define macro UNSAFE_MINI_TO_U232() = takes (0) returns (0) {
    // takes:               // [value]
    MINI_U232_MASK()         // [mask, value]
    and                     // [masked_value]
}

/// ## U240 Mask
/// 
/// Used to downcast a value to a smaller type.
/// 
/// ### Usage
/// 
/// ```huff
/// #define macro MAIN() = takes (0) returns (0) {
///     0x00 calldataload
///     U240_MASK() and
/// }
/// ```
#define macro U240_MASK() = takes (0) returns (1) { 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff }

/// ## U240 Cast
/// 
/// Downcasts a value to a smaller type.
/// 
/// The `UNSAFE_TO_U240` macro will not revert on overflow.
#define macro TO_U240() = takes (1) returns (1) {
    // takes:               // [value]
    dup1                    // [value, value]
    U240_MASK()         // [mask, value, value]
    and                     // [masked_value, value]
    dup2                    // [value, masked_value, value]
    eq                      // [is_safe, value]
    is_safe                 // [is_safe_dest, is_safe, value]
    jumpi                   // [value]
        __ERROR(Overflow)   // [err]
        0x00                // [ptr, err]
        mstore              // []
        0x04                // [err_len]
        0x00                // [ptr, err_len]
        revert              // []
    is_safe:                // [value]
}

/// ## Mini U240 Mask
/// 
/// Used to downcast a value to a smaller type.
/// 
/// This consumes more runtime gas to the benefit of a smaller runtime size.
/// 
/// ### Usage
/// 
/// ```huff
/// #define macro MAIN() = takes (0) returns (0) {
///     0x00 calldataload
///     MINI_U240_MASK() and
/// }
/// ```
#define macro MINI_U240_MASK() = takes (0) returns (1) { __MINI_MASK(240) }

/// ## Mini U240 Cast
/// 
/// Downcasts a value to a smaller type.
/// 
/// This consumes more runtime gas to the benefit of a smaller runtime size.
/// 
/// The `UNSAFE_MINI_TO_U240` macro will not revert on overflow.
#define macro UNSAFE_MINI_TO_U240() = takes (0) returns (0) {
    // takes:               // [value]
    MINI_U240_MASK()         // [mask, value]
    and                     // [masked_value]
}

/// ## U248 Mask
/// 
/// Used to downcast a value to a smaller type.
/// 
/// ### Usage
/// 
/// ```huff
/// #define macro MAIN() = takes (0) returns (0) {
///     0x00 calldataload
///     U248_MASK() and
/// }
/// ```
#define macro U248_MASK() = takes (0) returns (1) { 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff }

/// ## U248 Cast
/// 
/// Downcasts a value to a smaller type.
/// 
/// The `UNSAFE_TO_U248` macro will not revert on overflow.
#define macro TO_U248() = takes (1) returns (1) {
    // takes:               // [value]
    dup1                    // [value, value]
    U248_MASK()         // [mask, value, value]
    and                     // [masked_value, value]
    dup2                    // [value, masked_value, value]
    eq                      // [is_safe, value]
    is_safe                 // [is_safe_dest, is_safe, value]
    jumpi                   // [value]
        __ERROR(Overflow)   // [err]
        0x00                // [ptr, err]
        mstore              // []
        0x04                // [err_len]
        0x00                // [ptr, err_len]
        revert              // []
    is_safe:                // [value]
}

/// ## Mini U248 Mask
/// 
/// Used to downcast a value to a smaller type.
/// 
/// This consumes more runtime gas to the benefit of a smaller runtime size.
/// 
/// ### Usage
/// 
/// ```huff
/// #define macro MAIN() = takes (0) returns (0) {
///     0x00 calldataload
///     MINI_U248_MASK() and
/// }
/// ```
#define macro MINI_U248_MASK() = takes (0) returns (1) { __MINI_MASK(248) }

/// ## Mini U248 Cast
/// 
/// Downcasts a value to a smaller type.
/// 
/// This consumes more runtime gas to the benefit of a smaller runtime size.
/// 
/// The `UNSAFE_MINI_TO_U248` macro will not revert on overflow.
#define macro UNSAFE_MINI_TO_U248() = takes (0) returns (0) {
    // takes:               // [value]
    MINI_U248_MASK()         // [mask, value]
    and                     // [masked_value]
}

/// ## U256 Mask
/// 
/// Used to downcast a value to a smaller type.
/// 
/// ### Usage
/// 
/// ```huff
/// #define macro MAIN() = takes (0) returns (0) {
///     0x00 calldataload
///     U256_MASK() and
/// }
/// ```
#define macro U256_MASK() = takes (0) returns (1) { 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff }

/// ## U256 Cast
/// 
/// Downcasts a value to a smaller type.
/// 
/// The `UNSAFE_TO_U256` macro will not revert on overflow.
#define macro TO_U256() = takes (1) returns (1) {
    // takes:               // [value]
    dup1                    // [value, value]
    U256_MASK()         // [mask, value, value]
    and                     // [masked_value, value]
    dup2                    // [value, masked_value, value]
    eq                      // [is_safe, value]
    is_safe                 // [is_safe_dest, is_safe, value]
    jumpi                   // [value]
        __ERROR(Overflow)   // [err]
        0x00                // [ptr, err]
        mstore              // []
        0x04                // [err_len]
        0x00                // [ptr, err_len]
        revert              // []
    is_safe:                // [value]
}

/// ## Mini U256 Mask
/// 
/// Used to downcast a value to a smaller type.
/// 
/// This consumes more runtime gas to the benefit of a smaller runtime size.
/// 
/// ### Usage
/// 
/// ```huff
/// #define macro MAIN() = takes (0) returns (0) {
///     0x00 calldataload
///     MINI_U256_MASK() and
/// }
/// ```
#define macro MINI_U256_MASK() = takes (0) returns (1) { __MINI_MASK(256) }

/// ## Mini U256 Cast
/// 
/// Downcasts a value to a smaller type.
/// 
/// This consumes more runtime gas to the benefit of a smaller runtime size.
/// 
/// The `UNSAFE_MINI_TO_U256` macro will not revert on overflow.
#define macro UNSAFE_MINI_TO_U256() = takes (0) returns (0) {
    // takes:               // [value]
    MINI_U256_MASK()         // [mask, value]
    and                     // [masked_value]
}
/// ## Mini Mask
///
/// Used as a utility to generate the mask
///
/// The macro body is functionally equivalent to the following: `2 ** bitsize - 1`
///
/// ### Template Arguments
///
/// - `bitsize` - The number of bits to generate a mask for.
///
/// ### Usage
///
/// ```huff
/// #define macro MINI_U32_MASK() = takes (0) returns (1) { __MINI_MASK(32)}
/// ```
#define macro __MINI_MASK(bitsize) = takes (0) returns (1) {
    0x01        // [one]
    dup1        // [one, one]
    <bitsize>   // [bisize, one, one]
    shl         // [mask_plus_one, one]
    sub         // [mask]
}
