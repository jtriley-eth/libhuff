// -------------------------------------------------------------------------------------------------
// Casting Library
//
// (generated by the script `script/Gen-libcast.sol`)

/// ## U8 Mask
///
/// Used to downcast types.
///
/// The `MINI_U8_MASK` macro generates a mask that is intended to have a smaller runtime size than
/// a full mask at the expense of runtime cost.
#define constant U8_MASK = 0xFF

/// ## U16 Mask
///
/// Used to downcast types.
///
/// The `MINI_U16_MASK` macro generates a mask that is intended to have a smaller runtime size than
/// a full mask at the expense of runtime cost.
#define constant U16_MASK = 0xFFFF

/// ## U32 Mask
///
/// Used to downcast types.
///
/// The `MINI_U32_MASK` macro generates a mask that is intended to have a smaller runtime size than
/// a full mask at the expense of runtime cost.
#define constant U32_MASK = 0xFFFFFFFF
#define macro MINI_U32_MASK() = takes (0) returns (0) { __MINI_MASK(32) }

/// ## U64 Mask
///
/// Used to downcast types.
///
/// The `MINI_U64_MASK` macro generates a mask that is intended to have a smaller runtime size than
/// a full mask at the expense of runtime cost.
#define constant U64_MASK = 0xFFFFFFFFFFFFFFFF
#define macro MINI_U64_MASK() = takes (0) returns (0) { __MINI_MASK(64) }

/// ## U128 Mask
///
/// Used to downcast types.
///
/// The `MINI_U128_MASK` macro generates a mask that is intended to have a smaller runtime size than
/// a full mask at the expense of runtime cost.
#define constant U128_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
#define macro MINI_U128_MASK() = takes (0) returns (0) { __MINI_MASK(128) }

/// ## U256 Mask
///
/// Used to downcast types.
///
/// The `MINI_U256_MASK` macro generates a mask that is intended to have a smaller runtime size than
/// a full mask at the expense of runtime cost.
#define constant U256_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
#define macro MINI_U256_MASK() = takes (0) returns (0) { __MINI_MASK(256) }

/// ## Mini Mask
///
/// Used as a utility to generate the mask
///
/// The macro body is functionally equivalent to the following: `2 ** bitsize - 1`
///
/// ### Template Arguments
///
/// - `bitsize` - The number of bits to generate a mask for.
///
/// ### Usage
///
/// ```huff
/// #define macro MINI_U32_MASK() = takes (0) returns (0) { __MINI_MASK(32)}
/// ```
#define macro __MINI_MASK(bitsize) = takes (0) returns (0) {
    0x01        // [one]
    dup1        // [one, one]
    <bitsize>   // [bisize, one, one]
    shl         // [mask_plus_one, one]
    sub         // [mask]
}
