//  ------------------------------------------------------------------------------------------------
//! # Reentrancy Library
//!
//! Provides reentrancy prevention by wrapping other macros in a reentrancy guard.

/// ## Reentrancy Guard Slot
///
/// Custom slot for the contract-level reentrancy guard.
///
/// For reducing codesize, a different slot may be used so long as it does not collide with its
/// existing transient storage layout.
///
/// Derived from `uint256(keccak256(bytes("libhuff.nonreentrant.slot"))) - 1`
#define macro REENTRANCY_SLOT = 0x356c122056104ddcfeabc3ef4e4e83bab80ed0e287991b1a7f1bea3aa9623c05

/// ## Locked and Unlocked States
///
/// Toggled states for the reentrnacy guard.
#define constant UNLOCKED = 0x00
#define constant LOCKED = 0x01

/// ## Reentrant Error
///
/// Thrown when reentrancy is detected.
#define error Reentrant()

/// ## Reentrnacy Guard
///
/// Detects and reverts on contract-level reentrancy.
///
/// ### Template Arguments
///
/// - `inner`: expression that is evaluated if the reentrancy guard is inactive.
///
/// ### Panics
///
/// - if the value at `REENTRANCY_SLOT` is nonzero before execution
/// - if `inner` panics
///
/// ### Usage
///
/// ```huff
/// #include "libreentrancy.huff"
///
/// #define macro MAKE_CALL() = takes (0) returns (0) {
///     0x00 0x00 0x00 0x00 0x00
///     [EXTERNAL_CONTRACT] gas call
///     pop
/// }
///
/// #define macro MAIN() = takes (0) returns (0) {
///     REENTRANCY_GUARD(MAKE_CALL())
///     returndatasize 0x00 0x00 returndatacopy
///     returndatasize 0x00 return
/// }
/// ```
#define macro REENTRANCY_GUARD(inner) = takes (0) returns (0) {
    // if tload(slot) != 0 { revert() }
    // else { tstore(slot, 1); inner; tstore(slot, 0) }
    [REENTRANCY_SLOT]           // [slot]
    dup1                        // [slot, slot]
    dup1                        // [slot, slot, slot]
    tload                       // [locked, slot, slot]
    iszero                      // [unlocked, slot, slot]
    unlocked                    // [unlocked_dst, unlocked, slot, slot]
    jumpi                       // [slot, slot]
        _ERROR(reentrant)       // [err, slot, slot]
        0x00                    // [ptr, err, slot, slot]
        mstore                  // [slot, slot]
        0x04                    // [len, slot, slot]
        0x00                    // [ptr, len, slot, slot]
        revert                  // []
    unlocked:                   // [slot, slot]
        [LOCKED]                // [locked, slot, slot]
        tstore                  // [slot]
        <inner>                 // [slot]
        [UNLOCKED]              // [unlocked, slot]
        tstore                  // []
}
