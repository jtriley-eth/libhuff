// -------------------------------------------------------------------------------------------------
// Reentrancy Library

/// ## Reentrancy Guard Slot
///
/// Custom slot for the contract-level reentrancy guard.
///
/// For reducing codesize, a different slot may be used so long as it does not collide with its
/// existing storage layout.
///
/// Derived from `uint256(keccak256(bytes("libhuff.nonreentrant.slot"))) - 1`
#define macro REENTRANCY_SLOT = 0x356c122056104ddcfeabc3ef4e4e83bab80ed0e287991b1a7f1bea3aa9623c05

/// ## Locked and Unlocked States
///
/// Toggled states for the reentrnacy guard.
///
/// Due to EVM storage rules (as of Shanghai), toggling between 1 and 2 is more gas efficient than
/// toggling between 0 and 1.
#define macro UNLOCKED = 0x01
#define macro LOCKED = 0x02

/// ## Reentrant Error
///
/// Thrown when reentrancy is detected.
#define error Reentrant()

/// ## Reentrnacy Guard
///
/// Detects and reverts on contract-level reentrancy.
///
/// > WARNING: The `inner` expression MUST NOT halt execution successfully internally. This WILL
/// > lock the reentrancy guard forever.
///
/// ### Template Arguments
///
/// - `inner`: expression that is evaluated if the reentrancy guard is inactive.
///
/// ### Panics
///
/// - if the value at `REENTRANCY_SLOT` is explicitly `0x02` before execution
/// - if `inner` panics
///
/// ### Usage
///
/// ```huff
/// #include "libreentrancy.huff"
///
/// #define macro MAKE_CALL() = takes (0) returns (0) {
///     0x00 0x00 0x00 0x00 0x00
///     [EXTERNAL_CONTRACT] gas call
///     pop
/// }
///
/// #define macro MAIN() = takes (0) returns (0) {
///     REENTRANCY_GUARD(MAKE_CALL())
///     returndatasize 0x00 0x00 returndatacopy
///     returndatasize 0x00 return
/// }
/// ```
#define macro REENTRANCY_GUARD(<inner>) = takes (0) returns (0) {
    [UNLOCKED]              // [unlocked]
    [REENTRANCY_SLOT]       // [slot, unlocked]
    [LOCKED]                // [locked, slot, unlocked]
    dup2                    // [slot, locked, slot, unlocked]
    dup1                    // [slot, slot, locked, slot, unlocked]
    sload                   // [lock, slot, locked, slot, unlocked]
    dup3                    // [locked, lock, slot, locked, slot, unlocked]
    eq                      // [is_locked, slot, locked, slot, unlocked]
    iszero                  // [is_unlocked, slot, locked, slot, unlocked]
    unlocked                // [unlocked_dest, is_unlocked, slot, locked, slot, unlocked]
    jumpi                   // [slot, locked, slot, unlocked]
        __ERROR(Reentrant)  // [err, slot, locked, slot, unlocked]
        0x00                // [ptr, err, slot, locked, slot, unlocked]
        mstore              // [slot, locked, slot, unlocked]
        0x04                // [err_len, slot, locked, slot, unlocked]
        0x00                // [ptr, err_len, slot, locked, slot, unlocked]
        revert              // []
    unlocked:               // [slot, locked, slot, unlocked]
        sstore              // [slot, unlocked]
        <inner>             // [slot, unlocked]
        sstore              // []
}
